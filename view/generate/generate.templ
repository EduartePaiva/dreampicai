package generate

import (
	"dreampicai/view/layout"
	"dreampicai/types"
	"fmt"
	"strconv"
	"dreampicai/view/components"
)

type ViewData struct {
	Images     []types.Image
	FormParams FormParams
	FormErrors FormErrors
}

templ Index(data ViewData) {
	@layout.App(true) {
		<div class="flex w-full h-[calc(100vh-69px)]">
			<div class="w-[400px] border-r border-app p-4">
				@Form(data.FormParams, data.FormErrors)
			</div>
			<div class="flex-1 bg-base-300">
				@Gallery(data.Images)
			</div>
		</div>
	}
}

type FormParams struct {
	Prompt string
	Amount int
}
type FormErrors struct {
	Prompt        string
	Amount        string
	CreditsNeeded int
	UserCredits   int
	Credits       bool
}

templ Form(params FormParams, errors FormErrors) {
	<form
		hx-post="/generate"
		hx-swap="outerHTML"
	>
		<label class="form-control">
			<div class="label">
				<span class="label-text">Enter your prompt</span>
			</div>
			<textarea
				name="prompt"
				class="textarea textarea-bordered h-24"
				placeholder="A woman in a white dress"
			>
				{ params.Prompt }
			</textarea>
			if len(errors.Prompt) > 0 {
				<div class="label">
					<span class="label-text text-error">{ errors.Prompt }</span>
				</div>
			}
		</label>
		<label class="form-control my-4">
			<div class="label">
				<span class="label-text">How many images?</span>
			</div>
			<div class="join">
				for _,amount := range amounts {
					if amount == strconv.Itoa(params.Amount) {
						<input type="radio" value={ amount } name="amount" aria-label={ amount } class="join-item btn" checked/>
					} else {
						<input type="radio" value={ amount } name="amount" aria-label={ amount } class="join-item btn"/>
					}
				}
			</div>
			if len(errors.Amount) > 0 {
				<div class="label">
					<span class="label-text text-error">{ errors.Amount }</span>
				</div>
			}
		</label>
		<div class="">
			<button class="btn mt-4 btn-primary w-full">generate</button>
		</div>
	</form>
	if errors.Credits {
		@components.CreditsModal(errors.CreditsNeeded, errors.UserCredits)
	}
}

templ Gallery(images []types.Image) {
	<div class="grid grid-cols-4 p-4 gap-4" id="gallery">
		for _, image := range(images) {
			@GalleryImage(image)
		}
	</div>
}

templ GalleryImage(image types.Image) {
	if image.Status == types.ImageStatusCompleted {
		<div class="rounded-xl aspect-[2/3] cursor-pointer">
			<img
				class="object-cover rounded-xl"
				src={ image.ImageLocation }
				alt="emb image"
			/>
		</div>
	} else if image.Status == types.ImageStatusFailed {
		<div class="bg-red-100 rounded-xl aspect-[2/3] flex justify-center items-center">
			<i class="fa-solid fa-bug text-5xl text-slate-600"></i>
		</div>
	} else if image.Status == types.ImageStatusPending {
		<div
			hx-get={ fmt.Sprintf("/generate/image/status/%s", image.ID.String()) }
			hx-trigger="load delay:3s"
			hx-swap="outerHTML"
			class="bg-red-100 rounded-xl aspect-[2/3] flex justify-center items-center"
		>
			<span class="loading loading-spinner loading-lg text-gray-700"></span>
		</div>
	}
}

var amounts = []string{"1", "2", "4", "8"}
